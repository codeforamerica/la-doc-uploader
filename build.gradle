plugins {
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'java'
    id 'com.adarshr.test-logger' version '3.2.0'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

configurations.configureEach {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

def props = new Properties()
if (file(".env").exists()) {
    file(".env").withInputStream { props.load(it) }
}

repositories {
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    mavenCentral()
}

def profile = props.getProperty('SPRING_PROFILES_ACTIVE')
def formFlowLibraryVersion = '1.3.0'
def useLocalLibrary = System.getenv('USE_LOCAL_LIBRARY')

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.jcraft:jsch:0.1.55'
    implementation 'org.springframework.shell:spring-shell-starter:3.2.2'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.6'
    implementation("com.mixpanel:mixpanel-java:1.5.3")
    implementation group: 'ch.qos.logback.contrib', name: 'logback-json-classic', version: '0.1.5'
    implementation group: 'ch.qos.logback.contrib', name: 'logback-jackson', version: '0.1.5'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.17.2'
    implementation 'com.opencsv:opencsv:5.9'
    
    implementation "org.codeforamerica.platform:form-flow:${formFlowLibraryVersion}"
    println "ðŸ“šUsing form flow library ${formFlowLibraryVersion}"


    implementation 'com.amazonaws:aws-encryption-sdk-java:3.0.1'
    implementation 'org.bouncycastle:bcpg-jdk15on:1.70'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.70'
    implementation 'org.springframework.shell:spring-shell-starter:3.2.2'

    implementation 'commons-net:commons-net:3.10.0'
    testImplementation 'org.projectlombok:lombok:1.18.32'

    implementation 'io.sentry:sentry-spring-boot-starter-jakarta:7.11.0'
    implementation 'io.sentry:sentry-logback:7.11.0'


    testImplementation 'junit:junit:4.13.2'


    compileOnly 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.apache.httpcomponents.client5:httpclient5:5.3.1'
    testImplementation 'org.seleniumhq.selenium:selenium-java:4.22.0'
    testImplementation 'io.percy:percy-java-selenium:2.0.5'
    testImplementation 'org.awaitility:awaitility'
    testImplementation 'io.github.bonigarcia:webdrivermanager:5.9.1'
    testImplementation 'com.deque.html.axe-core:selenium:4.8.2'

    testAnnotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'

    runtimeOnly 'org.postgresql:postgresql'
}

springBoot {
    buildInfo()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.shell:spring-shell-dependencies:3.3.1"
    }
}

test {
    useJUnitPlatform {
        JUnitPlatformOptions options ->
            options.excludeTags("a11y")
    }
}

def unitTest = tasks.register("unitTest", Test) {
    Test task ->
        task.useJUnitPlatform {
            JUnitPlatformOptions options ->
                options.excludeTags("a11y")
        }
}

def axeAccessibilityTest = tasks.register("accessibilityTest", Test) {
    Test task ->
        task.useJUnitPlatform {
            JUnitPlatformOptions options ->
                options.includeTags 'a11y'
        }
}

tasks.withType(Test).configureEach {
    Test task ->
        task.testLogging {
            exceptionFormat = "full"
            events = ["failed", "skipped"]
            showStackTraces = true
            showCauses = true
            showExceptions = true
            // uncomment the following line to print stdout and stderr for every test
//             showStandardStreams = true
        }
        environment("DEFAULT_LOCALE", "en")
        environment("SENTRY_DSN", "")
        environment("MIXPANEL_API_KEY", "this-is-a-dummy-key-for-la-tests")
}

jar {
  enabled false
}
